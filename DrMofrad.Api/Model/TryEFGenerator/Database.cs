// Licence file C:\Users\KAMAL\OneDrive\Documents\ReversePOCO.txt not found.
// Please obtain your licence file at www.ReversePOCO.co.uk, and place it in your documents folder shown above.
// Defaulting to Trial version.
// <auto-generated>
// ReSharper disable All

using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Design;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Microsoft.EntityFrameworkCore.Query;
using Microsoft.EntityFrameworkCore.Query.Internal;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Data;
using System.Data.SqlTypes;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading;
using System.Threading.Tasks;

namespace DrMofrad.Api.Model.TryEFGenerator
{
    #region Database context interface

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public interface IMyDbContext : IDisposable
    {
        DbSet<HoursAttend> HoursAttends { get; set; } // HoursAttends
        DbSet<Lang> Langs { get; set; } // Lang
        DbSet<Member> Members { get; set; } // Members
        DbSet<Opinion> Opinions { get; set; } // Opinions
        DbSet<Page> Pages { get; set; } // Pages
        DbSet<SeoSetting> SeoSettings { get; set; } // SeoSettings
        DbSet<SlideShow> SlideShows { get; set; } // SlideShows
        DbSet<TelegramChannel> TelegramChannels { get; set; } // TelegramChannels
        DbSet<TelegramMessage> TelegramMessages { get; set; } // TelegramMessages
        DbSet<TelegramUser> TelegramUsers { get; set; } // TelegramUsers

        int SaveChanges();
        int SaveChanges(bool acceptAllChangesOnSuccess);
        Task<int> SaveChangesAsync(CancellationToken cancellationToken = default(CancellationToken));
        Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken = default(CancellationToken));
        DatabaseFacade Database { get; }
        DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();
    }

    #endregion

    #region Database context

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public class MyDbContext : DbContext, IMyDbContext
    {
        public MyDbContext()
        {
        }

        public MyDbContext(DbContextOptions<MyDbContext> options)
            : base(options)
        {
        }

        public DbSet<HoursAttend> HoursAttends { get; set; } // HoursAttends
        public DbSet<Lang> Langs { get; set; } // Lang
        public DbSet<Member> Members { get; set; } // Members
        public DbSet<Opinion> Opinions { get; set; } // Opinions
        public DbSet<Page> Pages { get; set; } // Pages
        public DbSet<SeoSetting> SeoSettings { get; set; } // SeoSettings
        public DbSet<SlideShow> SlideShows { get; set; } // SlideShows
        public DbSet<TelegramChannel> TelegramChannels { get; set; } // TelegramChannels
        public DbSet<TelegramMessage> TelegramMessages { get; set; } // TelegramMessages
        public DbSet<TelegramUser> TelegramUsers { get; set; } // TelegramUsers

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                optionsBuilder.UseSqlServer(@"Data Source=.;Initial Catalog=DRMofrad;Integrated Security=True");
            }
        }

        public bool IsSqlParameterNull(SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == DBNull.Value);
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.ApplyConfiguration(new HoursAttendConfiguration());
            modelBuilder.ApplyConfiguration(new LangConfiguration());
            modelBuilder.ApplyConfiguration(new MemberConfiguration());
            modelBuilder.ApplyConfiguration(new OpinionConfiguration());
            modelBuilder.ApplyConfiguration(new PageConfiguration());
            modelBuilder.ApplyConfiguration(new SeoSettingConfiguration());
            modelBuilder.ApplyConfiguration(new SlideShowConfiguration());
            modelBuilder.ApplyConfiguration(new TelegramChannelConfiguration());
            modelBuilder.ApplyConfiguration(new TelegramMessageConfiguration());
            modelBuilder.ApplyConfiguration(new TelegramUserConfiguration());
        }

    }

    #endregion

    #region Database context factory

    public class MyDbContextFactory : IDesignTimeDbContextFactory<MyDbContext>
    {
        public MyDbContext CreateDbContext(string[] args)
        {
            return new MyDbContext();
        }
    }

    #endregion

    #region Fake Database context

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public class FakeMyDbContext : IMyDbContext
    {
        public DbSet<HoursAttend> HoursAttends { get; set; } // HoursAttends
        public DbSet<Lang> Langs { get; set; } // Lang
        public DbSet<Member> Members { get; set; } // Members
        public DbSet<Opinion> Opinions { get; set; } // Opinions
        public DbSet<Page> Pages { get; set; } // Pages
        public DbSet<SeoSetting> SeoSettings { get; set; } // SeoSettings
        public DbSet<SlideShow> SlideShows { get; set; } // SlideShows
        public DbSet<TelegramChannel> TelegramChannels { get; set; } // TelegramChannels
        public DbSet<TelegramMessage> TelegramMessages { get; set; } // TelegramMessages
        public DbSet<TelegramUser> TelegramUsers { get; set; } // TelegramUsers

        public FakeMyDbContext()
        {
            _database = null;

            HoursAttends = new FakeDbSet<HoursAttend>("Id");
            Langs = new FakeDbSet<Lang>("Id");
            Members = new FakeDbSet<Member>("Id");
            Opinions = new FakeDbSet<Opinion>("Id");
            Pages = new FakeDbSet<Page>("Id");
            SeoSettings = new FakeDbSet<SeoSetting>("Id");
            SlideShows = new FakeDbSet<SlideShow>("Id");
            TelegramChannels = new FakeDbSet<TelegramChannel>("Username");
            TelegramMessages = new FakeDbSet<TelegramMessage>("MessageId", "FromId");
            TelegramUsers = new FakeDbSet<TelegramUser>("Id");

        }

        public int SaveChangesCount { get; private set; }
        public virtual int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public virtual int SaveChanges(bool acceptAllChangesOnSuccess)
        {
            return SaveChanges();
        }

        public virtual Task<int> SaveChangesAsync(CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }
        public virtual Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return Task<int>.Factory.StartNew(x => 1, acceptAllChangesOnSuccess, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        private DatabaseFacade _database;
        public DatabaseFacade Database { get { return _database; } }

        public DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new NotImplementedException();
        }

        public override string ToString()
        {
            throw new NotImplementedException();
        }
    }

    #endregion

    #region Fake DbSet

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    public class FakeDbSet<TEntity> : DbSet<TEntity>, IQueryable<TEntity>, IAsyncEnumerable<TEntity>, IListSource where TEntity : class
    {
        private readonly PropertyInfo[] _primaryKeys;
        private readonly ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;

        public FakeDbSet()
        {
            _primaryKeys = null;
            _data        = new ObservableCollection<TEntity>();
            _query       = _data.AsQueryable();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data        = new ObservableCollection<TEntity>();
            _query       = _data.AsQueryable();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override ValueTask<TEntity> FindAsync(object[] keyValues, CancellationToken cancellationToken)
        {
            return new ValueTask<TEntity>(Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken));
        }

        public override ValueTask<TEntity> FindAsync(params object[] keyValues)
        {
            return new ValueTask<TEntity>(Task<TEntity>.Factory.StartNew(() => Find(keyValues)));
        }

        IAsyncEnumerator<TEntity> IAsyncEnumerable<TEntity>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAsyncEnumerator(cancellationToken);
        }

        public override EntityEntry<TEntity> Add(TEntity entity)
        {
            _data.Add(entity);
            return null;
        }

        public override void AddRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            foreach (var entity in entities.ToList())
                _data.Add(entity);
        }

        public override void AddRange(IEnumerable<TEntity> entities)
        {
            AddRange(entities.ToArray());
        }

        public override Task AddRangeAsync(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            return Task.Factory.StartNew(() => AddRange(entities));
        }

        public override void AttachRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            AddRange(entities);
        }

        public override void RemoveRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            foreach (var entity in entities.ToList())
                _data.Remove(entity);
        }

        public override void RemoveRange(IEnumerable<TEntity> entities)
        {
            RemoveRange(entities.ToArray());
        }

        public override void UpdateRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            RemoveRange(entities);
            AddRange(entities);
        }

        public IList GetList()
        {
            return _data;
        }

        IList IListSource.GetList()
        {
            return _data;
        }

        Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); }
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        IEnumerator<TEntity> IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        IAsyncEnumerator<TEntity> GetAsyncEnumerator(CancellationToken cancellationToken = default(CancellationToken))
        {
            return new FakeDbAsyncEnumerator<TEntity>(this.AsEnumerable().GetEnumerator());
        }

    }

    public class FakeDbAsyncQueryProvider<TEntity> : IAsyncQueryProvider
    {
        private readonly IQueryProvider _inner;

        public FakeDbAsyncQueryProvider(IQueryProvider inner)
        {
            _inner = inner;
        }

        public IQueryable CreateQuery(Expression expression)
        {
            var m = expression as MethodCallExpression;
            if (m != null)
            {
                var resultType = m.Method.ReturnType; // it should be IQueryable<T>
                var tElement = resultType.GetGenericArguments()[0];
                var queryType = typeof(FakeDbAsyncEnumerable<>).MakeGenericType(tElement);
                return (IQueryable) Activator.CreateInstance(queryType, expression);
            }
            return new FakeDbAsyncEnumerable<TEntity>(expression);
        }

        public IQueryable<TElement> CreateQuery<TElement>(Expression expression)
        {
            var queryType = typeof(FakeDbAsyncEnumerable<>).MakeGenericType(typeof(TElement));
            return (IQueryable<TElement>) Activator.CreateInstance(queryType, expression);
        }

        public object Execute(Expression expression)
        {
            return _inner.Execute(expression);
        }

        public TResult Execute<TResult>(Expression expression)
        {
            return _inner.Execute<TResult>(expression);
        }

        public TResult ExecuteAsync<TResult>(Expression expression, CancellationToken cancellationToken = new CancellationToken())
        {
            return _inner.Execute<TResult>(expression);
        }
    }

    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, IAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(IEnumerable<T> enumerable)
            : base(enumerable)
        {
        }

        public FakeDbAsyncEnumerable(Expression expression)
            : base(expression)
        {
        }

        public IAsyncEnumerator<T> GetAsyncEnumerator(CancellationToken cancellationToken = new CancellationToken())
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        IAsyncEnumerator<T> IAsyncEnumerable<T>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAsyncEnumerator(cancellationToken);
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return this.AsEnumerable().GetEnumerator();
        }
    }

    public class FakeDbAsyncEnumerator<T> : IAsyncEnumerator<T>
    {
        private readonly IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public T Current
        {
            get { return _inner.Current; }
        }
        public ValueTask<bool> MoveNextAsync()
        {
            return new ValueTask<bool>(_inner.MoveNext());
        }

        public ValueTask DisposeAsync()
        {
            _inner.Dispose();
            return new ValueTask(Task.CompletedTask);
        }
    }

    #endregion

    #region POCO classes

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    // HoursAttends
    public class HoursAttend
    {
        public int Id { get; set; } // Id (Primary key)
        public string Day { get; set; } // Day (length: 1000)
        public string Time { get; set; } // Time (length: 1000)
        public int? LangId { get; set; } // LangId

        // Foreign keys

        /// <summary>
        /// Parent Lang pointed by [HoursAttends].([LangId]) (FK_dbo.HoursAttends_dbo.Lang_LangId)
        /// </summary>
        public virtual Lang Lang { get; set; } // FK_dbo.HoursAttends_dbo.Lang_LangId
    }

    // Lang
    public class Lang
    {
        public int Id { get; set; } // Id (Primary key)
        public string Title { get; set; } // Title (length: 200)

        // Reverse navigation

        /// <summary>
        /// Child HoursAttends where [HoursAttends].[LangId] point to this entity (FK_dbo.HoursAttends_dbo.Lang_LangId)
        /// </summary>
        public virtual ICollection<HoursAttend> HoursAttends { get; set; } // HoursAttends.FK_dbo.HoursAttends_dbo.Lang_LangId

        /// <summary>
        /// Child Pages where [Pages].[LangId] point to this entity (FK_dbo.Pages_dbo.Lang_LangId)
        /// </summary>
        public virtual ICollection<Page> Pages { get; set; } // Pages.FK_dbo.Pages_dbo.Lang_LangId

        /// <summary>
        /// Child SeoSettings where [SeoSettings].[LangId] point to this entity (FK_dbo.SeoSettings_dbo.Lang_LangId)
        /// </summary>
        public virtual ICollection<SeoSetting> SeoSettings { get; set; } // SeoSettings.FK_dbo.SeoSettings_dbo.Lang_LangId

        /// <summary>
        /// Child SlideShows where [SlideShows].[LangId] point to this entity (FK_dbo.SlideShows_dbo.Lang_LangId)
        /// </summary>
        public virtual ICollection<SlideShow> SlideShows { get; set; } // SlideShows.FK_dbo.SlideShows_dbo.Lang_LangId

        public Lang()
        {
            HoursAttends = new List<HoursAttend>();
            Pages = new List<Page>();
            SeoSettings = new List<SeoSetting>();
            SlideShows = new List<SlideShow>();
        }
    }

    // Members
    public class Member
    {
        public int Id { get; set; } // Id (Primary key)
        public string FullName { get; set; } // FullName (length: 50)
        public string UserName { get; set; } // UserName (length: 50)
        public string Password { get; set; } // Password (length: 1000)
        public string Email { get; set; } // Email (length: 100)
    }

    // Opinions
    public class Opinion
    {
        public int Id { get; set; } // Id (Primary key)
        public int? ArticleId { get; set; } // ArticleId
        public string FullName { get; set; } // FullName (length: 50)
        public string Email { get; set; } // Email (length: 100)
        public string Message { get; set; } // Message (length: 1000)
        public string Ip { get; set; } // Ip (length: 50)
        public DateTime? Date { get; set; } // Date
        public bool? Accept { get; set; } // Accept
        public bool? IsReaded { get; set; } // IsReaded
        public string Answer { get; set; } // Answer (length: 2000)
    }

    // Pages
    public class Page
    {
        public int Id { get; set; } // Id (Primary key)
        public string Title { get; set; } // Title (length: 200)
        public string Description { get; set; } // Description (length: 4000)
        public int? LangId { get; set; } // LangId
        public string Key { get; set; } // Key (length: 100)

        // Foreign keys

        /// <summary>
        /// Parent Lang pointed by [Pages].([LangId]) (FK_dbo.Pages_dbo.Lang_LangId)
        /// </summary>
        public virtual Lang Lang { get; set; } // FK_dbo.Pages_dbo.Lang_LangId

        public Page()
        {
            Key = "";
        }
    }

    // SeoSettings
    public class SeoSetting
    {
        public int Id { get; set; } // Id (Primary key)
        public string PageName { get; set; } // PageName (length: 200)
        public string TitlePage { get; set; } // TitlePage (length: 200)
        public string KeywordsPage { get; set; } // KeywordsPage (length: 4000)
        public string Description { get; set; } // Description (length: 4000)
        public int? LangId { get; set; } // LangId

        // Foreign keys

        /// <summary>
        /// Parent Lang pointed by [SeoSettings].([LangId]) (FK_dbo.SeoSettings_dbo.Lang_LangId)
        /// </summary>
        public virtual Lang Lang { get; set; } // FK_dbo.SeoSettings_dbo.Lang_LangId
    }

    // SlideShows
    public class SlideShow
    {
        public int Id { get; set; } // Id (Primary key)
        public string Title { get; set; } // Title (length: 200)
        public string Description { get; set; } // Description (length: 2000)
        public string ImageUrl { get; set; } // imageUrl (length: 1000)
        public int Orders { get; set; } // Orders
        public int? LangId { get; set; } // LangId

        // Foreign keys

        /// <summary>
        /// Parent Lang pointed by [SlideShows].([LangId]) (FK_dbo.SlideShows_dbo.Lang_LangId)
        /// </summary>
        public virtual Lang Lang { get; set; } // FK_dbo.SlideShows_dbo.Lang_LangId
    }

    // TelegramChannels
    public class TelegramChannel
    {
        public string Username { get; set; } // username (Primary key) (length: 200)
        public long? Definer { get; set; } // definer

        // Foreign keys

        /// <summary>
        /// Parent TelegramUser pointed by [TelegramChannels].([Definer]) (FK_TelegramChannels_TelegramUsers)
        /// </summary>
        public virtual TelegramUser TelegramUser { get; set; } // FK_TelegramChannels_TelegramUsers
    }

    // TelegramMessages
    public class TelegramMessage
    {
        public int MessageId { get; set; } // message_id (Primary key)
        public long FromId { get; set; } // from_id (Primary key)
        public string MessageText { get; set; } // message_text
        public string Response { get; set; } // response
        public bool? ShowInPublic { get; set; } // show_in_public
        public DateTime? MessageTime { get; set; } // message_time
        public DateTime? ResponseTime { get; set; } // response_time

        // Foreign keys

        /// <summary>
        /// Parent TelegramUser pointed by [TelegramMessages].([FromId]) (FK_TelegramMessages_TelegramUsers)
        /// </summary>
        public virtual TelegramUser TelegramUser { get; set; } // FK_TelegramMessages_TelegramUsers
    }

    // TelegramUsers
    public class TelegramUser
    {
        public long Id { get; set; } // id (Primary key)
        public string FirstName { get; set; } // first_name
        public string LastName { get; set; } // last_name
        public string Username { get; set; } // username
        public string LanguageCode { get; set; } // language_code

        // Reverse navigation

        /// <summary>
        /// Child TelegramChannels where [TelegramChannels].[definer] point to this entity (FK_TelegramChannels_TelegramUsers)
        /// </summary>
        public virtual ICollection<TelegramChannel> TelegramChannels { get; set; } // TelegramChannels.FK_TelegramChannels_TelegramUsers

        /// <summary>
        /// Child TelegramMessages where [TelegramMessages].[from_id] point to this entity (FK_TelegramMessages_TelegramUsers)
        /// </summary>
        public virtual ICollection<TelegramMessage> TelegramMessages { get; set; } // TelegramMessages.FK_TelegramMessages_TelegramUsers

        public TelegramUser()
        {
            TelegramChannels = new List<TelegramChannel>();
            TelegramMessages = new List<TelegramMessage>();
        }
    }


    #endregion

    #region POCO Configuration

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    // HoursAttends
    public class HoursAttendConfiguration : IEntityTypeConfiguration<HoursAttend>
    {
        public void Configure(EntityTypeBuilder<HoursAttend> builder)
        {
            builder.ToTable("HoursAttends", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_dbo.HoursAttends").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Day).HasColumnName(@"Day").HasColumnType("nvarchar(1000)").IsRequired().HasMaxLength(1000);
            builder.Property(x => x.Time).HasColumnName(@"Time").HasColumnType("nvarchar(1000)").IsRequired().HasMaxLength(1000);
            builder.Property(x => x.LangId).HasColumnName(@"LangId").HasColumnType("int").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.Lang).WithMany(b => b.HoursAttends).HasForeignKey(c => c.LangId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_dbo.HoursAttends_dbo.Lang_LangId");

            builder.HasIndex(x => x.LangId).HasDatabaseName("IX_LangId");
        }
    }

    // Lang
    public class LangConfiguration : IEntityTypeConfiguration<Lang>
    {
        public void Configure(EntityTypeBuilder<Lang> builder)
        {
            builder.ToTable("Lang", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_dbo.Lang").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Title).HasColumnName(@"Title").HasColumnType("nvarchar(200)").IsRequired().HasMaxLength(200);
        }
    }

    // Members
    public class MemberConfiguration : IEntityTypeConfiguration<Member>
    {
        public void Configure(EntityTypeBuilder<Member> builder)
        {
            builder.ToTable("Members", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_dbo.Members").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.FullName).HasColumnName(@"FullName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.UserName).HasColumnName(@"UserName").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Password).HasColumnName(@"Password").HasColumnType("nvarchar(1000)").IsRequired(false).HasMaxLength(1000);
            builder.Property(x => x.Email).HasColumnName(@"Email").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
        }
    }

    // Opinions
    public class OpinionConfiguration : IEntityTypeConfiguration<Opinion>
    {
        public void Configure(EntityTypeBuilder<Opinion> builder)
        {
            builder.ToTable("Opinions", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_dbo.Opinions").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.ArticleId).HasColumnName(@"ArticleId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.FullName).HasColumnName(@"FullName").HasColumnType("nvarchar(50)").IsRequired().HasMaxLength(50);
            builder.Property(x => x.Email).HasColumnName(@"Email").HasColumnType("nvarchar(100)").IsRequired(false).HasMaxLength(100);
            builder.Property(x => x.Message).HasColumnName(@"Message").HasColumnType("nvarchar(1000)").IsRequired(false).HasMaxLength(1000);
            builder.Property(x => x.Ip).HasColumnName(@"Ip").HasColumnType("nvarchar(50)").IsRequired(false).HasMaxLength(50);
            builder.Property(x => x.Date).HasColumnName(@"Date").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.Accept).HasColumnName(@"Accept").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.IsReaded).HasColumnName(@"IsReaded").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.Answer).HasColumnName(@"Answer").HasColumnType("nvarchar(2000)").IsRequired(false).HasMaxLength(2000);

            builder.HasIndex(x => x.ArticleId).HasDatabaseName("IX_ArticleId");
        }
    }

    // Pages
    public class PageConfiguration : IEntityTypeConfiguration<Page>
    {
        public void Configure(EntityTypeBuilder<Page> builder)
        {
            builder.ToTable("Pages", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_dbo.Pages").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Title).HasColumnName(@"Title").HasColumnType("nvarchar(200)").IsRequired().HasMaxLength(200);
            builder.Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar(4000)").IsRequired().HasMaxLength(4000);
            builder.Property(x => x.LangId).HasColumnName(@"LangId").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.Key).HasColumnName(@"Key").HasColumnType("nvarchar(100)").IsRequired().HasMaxLength(100);

            // Foreign keys
            builder.HasOne(a => a.Lang).WithMany(b => b.Pages).HasForeignKey(c => c.LangId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_dbo.Pages_dbo.Lang_LangId");

            builder.HasIndex(x => x.LangId).HasDatabaseName("IX_LangId");
        }
    }

    // SeoSettings
    public class SeoSettingConfiguration : IEntityTypeConfiguration<SeoSetting>
    {
        public void Configure(EntityTypeBuilder<SeoSetting> builder)
        {
            builder.ToTable("SeoSettings", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_dbo.SeoSettings").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.PageName).HasColumnName(@"PageName").HasColumnType("nvarchar(200)").IsRequired().HasMaxLength(200);
            builder.Property(x => x.TitlePage).HasColumnName(@"TitlePage").HasColumnType("nvarchar(200)").IsRequired().HasMaxLength(200);
            builder.Property(x => x.KeywordsPage).HasColumnName(@"KeywordsPage").HasColumnType("nvarchar(4000)").IsRequired().HasMaxLength(4000);
            builder.Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar(4000)").IsRequired().HasMaxLength(4000);
            builder.Property(x => x.LangId).HasColumnName(@"LangId").HasColumnType("int").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.Lang).WithMany(b => b.SeoSettings).HasForeignKey(c => c.LangId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_dbo.SeoSettings_dbo.Lang_LangId");

            builder.HasIndex(x => x.LangId).HasDatabaseName("IX_LangId");
        }
    }

    // SlideShows
    public class SlideShowConfiguration : IEntityTypeConfiguration<SlideShow>
    {
        public void Configure(EntityTypeBuilder<SlideShow> builder)
        {
            builder.ToTable("SlideShows", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_dbo.SlideShows").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Title).HasColumnName(@"Title").HasColumnType("nvarchar(200)").IsRequired().HasMaxLength(200);
            builder.Property(x => x.Description).HasColumnName(@"Description").HasColumnType("nvarchar(2000)").IsRequired().HasMaxLength(2000);
            builder.Property(x => x.ImageUrl).HasColumnName(@"imageUrl").HasColumnType("nvarchar(1000)").IsRequired().HasMaxLength(1000);
            builder.Property(x => x.Orders).HasColumnName(@"Orders").HasColumnType("int").IsRequired();
            builder.Property(x => x.LangId).HasColumnName(@"LangId").HasColumnType("int").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.Lang).WithMany(b => b.SlideShows).HasForeignKey(c => c.LangId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_dbo.SlideShows_dbo.Lang_LangId");

            builder.HasIndex(x => x.LangId).HasDatabaseName("IX_LangId");
        }
    }

    // TelegramChannels
    public class TelegramChannelConfiguration : IEntityTypeConfiguration<TelegramChannel>
    {
        public void Configure(EntityTypeBuilder<TelegramChannel> builder)
        {
            builder.ToTable("TelegramChannels", "dbo");
            builder.HasKey(x => x.Username).HasName("PK_dbo.TelegramChannels").IsClustered();

            builder.Property(x => x.Username).HasColumnName(@"username").HasColumnType("nvarchar(200)").IsRequired().HasMaxLength(200).ValueGeneratedNever();
            builder.Property(x => x.Definer).HasColumnName(@"definer").HasColumnType("bigint").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.TelegramUser).WithMany(b => b.TelegramChannels).HasForeignKey(c => c.Definer).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_TelegramChannels_TelegramUsers");
        }
    }

    // TelegramMessages
    public class TelegramMessageConfiguration : IEntityTypeConfiguration<TelegramMessage>
    {
        public void Configure(EntityTypeBuilder<TelegramMessage> builder)
        {
            builder.ToTable("TelegramMessages", "dbo");
            builder.HasKey(x => new { x.MessageId, x.FromId }).HasName("PK_dbo.TelegramMessages").IsClustered();

            builder.Property(x => x.MessageId).HasColumnName(@"message_id").HasColumnType("int").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.FromId).HasColumnName(@"from_id").HasColumnType("bigint").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.MessageText).HasColumnName(@"message_text").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.Response).HasColumnName(@"response").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.ShowInPublic).HasColumnName(@"show_in_public").HasColumnType("bit").IsRequired(false);
            builder.Property(x => x.MessageTime).HasColumnName(@"message_time").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.ResponseTime).HasColumnName(@"response_time").HasColumnType("datetime").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.TelegramUser).WithMany(b => b.TelegramMessages).HasForeignKey(c => c.FromId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_TelegramMessages_TelegramUsers");
        }
    }

    // TelegramUsers
    public class TelegramUserConfiguration : IEntityTypeConfiguration<TelegramUser>
    {
        public void Configure(EntityTypeBuilder<TelegramUser> builder)
        {
            builder.ToTable("TelegramUsers", "dbo");
            builder.HasKey(x => x.Id).HasName("PK_dbo.TelegramUsers").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"id").HasColumnType("bigint").IsRequired().ValueGeneratedNever();
            builder.Property(x => x.FirstName).HasColumnName(@"first_name").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.LastName).HasColumnName(@"last_name").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.Username).HasColumnName(@"username").HasColumnType("nvarchar(max)").IsRequired(false);
            builder.Property(x => x.LanguageCode).HasColumnName(@"language_code").HasColumnType("nvarchar(max)").IsRequired(false);
        }
    }


    #endregion

}
// </auto-generated>
